--<ScriptOptions statementTerminator="@"/>

CREATE OR REPLACE FUNCTION STC_ACCOUNTING_PERIOD( iDATE DATE )
	RETURNS INTEGER
	LANGUAGE SQL
	READS SQL DATA
	DETERMINISTIC
	NO EXTERNAL ACTION
BEGIN
	RETURN MONTH( iDATE );
END
@

-- Get the name of a period or month
CREATE OR REPLACE FUNCTION STC_PERIOD_NAME( iDATE DATE )
	RETURNS VARCHAR(10)
	LANGUAGE SQL
	READS SQL DATA
	DETERMINISTIC
BEGIN
	RETURN MONTHNAME( iDATE );
END
@

-- Get the day number within a period or month
CREATE OR REPLACE FUNCTION STC_PERIOD_DAY( iDATE DATE )
	RETURNS INTEGER
	LANGUAGE SQL
	READS SQL DATA
	DETERMINISTIC
BEGIN
	RETURN DAYOFMONTH( iDATE );
END
@

-- Get the days within a period or month
CREATE OR REPLACE FUNCTION STC_PERIOD_DAYS( iDATE DATE )
	RETURNS INTEGER
	LANGUAGE SQL
	READS SQL DATA
	DETERMINISTIC
BEGIN
	RETURN DAY(LAST_DAY(iDATE));
END
@

-- Given a date, work out how many workdays so far in this period
CREATE OR REPLACE FUNCTION STC_WORKDAYS_PERIOD_SOFAR(iDATE DATE)
	RETURNS INTEGER
	LANGUAGE SQL
	READS SQL DATA
	DETERMINISTIC
	NO EXTERNAL ACTION
BEGIN
	DECLARE vRESULT, vHOLS INTEGER;
	DECLARE vDATE VARCHAR(10);
	SET vRESULT = 0;
	
	SET vDATE = DATE( YEAR(iDATE) || '-' || MONTH(iDATE) || '-01');
	
	WHILE DAYS(iDATE) >= DAYS(vDATE) DO
		IF DAYOFWEEK(vDATE) not in (1,7) THEN
			SET vRESULT = vRESULT + 1;
		END IF;
		SET vDATE = ADD_DAYS(vDATE, 1); -- Next day
	END WHILE;

	-- Count holidays during the period
	SET vHOLS = (SELECT COUNT(*)
		FROM DATES_CLOSED_HOLIDAYS
		WHERE CLOSED_DATE BETWEEN DATE( YEAR(iDATE) || '-' || MONTH(iDATE) || '-01')
			AND iDATE);
		
	SET vRESULT = vRESULT - vHOLS;

  RETURN vRESULT;
END
@

CREATE OR REPLACE FUNCTION STC_WEEKDAYS_IN_PERIOD(iPERIOD INTEGER, iYEAR INTEGER)
	RETURNS INTEGER
	LANGUAGE SQL
	READS SQL DATA
	DETERMINISTIC
	NO EXTERNAL ACTION
BEGIN
	DECLARE vRESULT INTEGER;
	DECLARE vDATE, vSTART, vEND DATE;

	SET vRESULT = 0;
	
	SET vSTART = DATE( iYEAR || '-' || iPERIOD || '-01');
	SET vEND = DATE( iYEAR || '-' || iPERIOD || '-' || STC_PERIOD_DAYS(vSTART));
	  
	SET vDATE = vSTART;
	WHILE DAYS(vEND) >= DAYS(vDATE) DO
		IF DAYOFWEEK(vDATE) not in (1,7) THEN
			SET vRESULT = vRESULT + 1;
		END IF;
		SET vDATE = ADD_DAYS(vDATE, 1); -- Next day
	END WHILE;
	
	RETURN vRESULT;
END
@

CREATE OR REPLACE FUNCTION STC_WORKDAYS_IN_PERIOD(iDATE DATE)
	RETURNS INTEGER
	LANGUAGE SQL
	READS SQL DATA
	DETERMINISTIC
	NO EXTERNAL ACTION
BEGIN
	DECLARE vRESULT INTEGER;
	DECLARE vEND_DATE DATE;
	
	SET vEND_DATE = DATE( YEAR(iDATE) || '-' || MONTH(iDATE) || '-' || STC_PERIOD_DAYS(iDATE));
	
	SET vRESULT = STC_WORKDAYS_PERIOD_SOFAR( vEND_DATE );

	RETURN vRESULT;
END
@

CREATE OR REPLACE FUNCTION STC_PERIOD_START(iPERIOD INTEGER, iYEAR INTEGER)
	RETURNS DATE
	LANGUAGE SQL
	READS SQL DATA
	DETERMINISTIC
BEGIN
	DECLARE vRESULT DATE;
	
	SET vRESULT = DATE( iYEAR || '-' || iPERIOD || '-01');
	
	RETURN vRESULT;
END
@

CREATE OR REPLACE FUNCTION STC_PERIOD_END(iPERIOD INTEGER, iYEAR INTEGER)
	RETURNS DATE
	LANGUAGE SQL
	READS SQL DATA
	DETERMINISTIC
BEGIN
	DECLARE vSTART, vRESULT DATE;
	
	SET vSTART = DATE( iYEAR || '-' || iPERIOD || '-01');
	SET vRESULT = DATE( iYEAR || '-' || iPERIOD || '-' || STC_PERIOD_DAYS(vSTART));
	
	RETURN vRESULT;
END
@

--<ScriptOptions statementTerminator=";"/>
GRANT EXECUTE ON FUNCTION STC_ACCOUNTING_PERIOD TO WEBTOOLS;
GRANT EXECUTE ON FUNCTION STC_PERIOD_NAME TO WEBTOOLS;
GRANT EXECUTE ON FUNCTION STC_PERIOD_DAY TO WEBTOOLS;
GRANT EXECUTE ON FUNCTION STC_PERIOD_DAYS TO WEBTOOLS;
GRANT EXECUTE ON FUNCTION STC_WORKDAYS_PERIOD_SOFAR TO WEBTOOLS;
GRANT EXECUTE ON FUNCTION STC_WEEKDAYS_IN_PERIOD TO WEBTOOLS;
GRANT EXECUTE ON FUNCTION STC_WORKDAYS_IN_PERIOD TO WEBTOOLS;
GRANT EXECUTE ON FUNCTION STC_PERIOD_START TO WEBTOOLS;
GRANT EXECUTE ON FUNCTION STC_PERIOD_END TO WEBTOOLS;

------- Testing below

select 
STC_ACCOUNTING_PERIOD( current_date ) as period,
STC_PERIOD_NAME( current_date ) as pname,
STC_PERIOD_DAY( current_date ) as pday,
STC_PERIOD_DAYS( current_date ) as pdays,
STC_WORKDAYS_PERIOD_SOFAR( current_date ) as wdsofar,
STC_WEEKDAYS_IN_PERIOD( 5, 2024 ) as wdperiod,
STC_WORKDAYS_IN_PERIOD( current_date ) as wd,
STC_PERIOD_START( 5, 2024 ) as pstart,
STC_PERIOD_END( 5, 2024 ) as pend

from sysibm.sysdummy1
